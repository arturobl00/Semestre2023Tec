name: FlutterFire
repository: https://github.com/firebase/flutterfire

packages:
  - packages/*
  - packages/*/*
  - packages/*/*/*
  - tests

command:
  version:
    # Generate commit links in package changelogs.
    linkToCommits: true
    # # Only allow versioning to happen on main branch.
    # branch: master
    # Additionally build a changelog at the root of the workspace.
    workspaceChangelog: true

    changelogs:
      - path: firebase_ui_changelog.md
        packageFilters:
          scope: firebase_ui_*
        description: |
          All notable changes for firebase_ui packages

  bootstrap:
    # It seems so that running "pub get" in parallel has some issues (like
    # https://github.com/dart-lang/pub/issues/3404). Disabling this feature
    # makes the CI much more stable.
    runPubGetInParallel: false
    usePubspecOverrides: true

scripts:
  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks.

  analyze:
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    run: |
      melos exec -c 1 -- \
        dart analyze . --fatal-infos
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  firebase:emulator:
    run: |
      cd .github/workflows/scripts && ./start-firebase-emulator.sh
    description: |
      Start the Firebase emulator suite. Used by Functions, Firestore, Auth and Storage
      integration testing.
       - Requires Node.js and NPM installed.

  format:
    run: |
      dart pub global run flutter_plugin_tools format && \
      swiftformat .
    description: |
      Build a specific example app for Android.
       - Requires `flutter_plugin_tools` (`dart pub global activate flutter_plugin_tools`).
       - Requires `clang-format` (can be installed via Brew on macOS).
       - Requires `swiftformat` (can be installed via Brew on macOS).

  build:all:
    run: |
      melos run build:example_ios_pub --no-select && \
      melos run build:example_android_pub --no-select && \
      melos run build:example_macos --no-select
    description: Build all example apps.

  build:example_android:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk"
    description: Build a specific example app for Android.
    packageFilters:
      dirExists:
        - android
      scope: '*example*'

  build:example_android_pub:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk"
    description: Build a specific example app for Android.
    packageFilters:
      dirExists:
        - android
      scope: '*example*'

  build:example_ios:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build ios --no-codesign"
    description: Build a specific example app for iOS.
    packageFilters:
      dirExists:
        - ios
      scope: '*example*'

  build:example_ios_pub:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build ios --no-codesign"
    description: Build a specific example app for iOS.
    packageFilters:
      dirExists:
        - ios
      scope: '*example*'

  build:example_macos:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build macos"
    description: |
      Build a specific example app for macOS.
    packageFilters:
      dirExists:
        - macos
      scope: '*example*'

  test:all:
    run: |
      melos run test --no-select && \
      melos run test:web --no-select && \
      melos run test:e2e --no-select
    description: |
      Run all tests available.

  test:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` for a specific package.
    packageFilters:
      dirExists:
        - test
      ignore:
        - '*web*'
        - '*odm*'
        - '*example*'

  test:web:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter test --platform=chrome"
    description: Run `flutter test --platform=chrome` for a specific '*web' package.
    packageFilters:
      dirExists:
        - test
      scope: '*web*'

  test:e2e:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter test integration_test/e2e_test.dart"
    description: |
      Run all e2e tests.
    packageFilters:
      dirExists:
        - integration_test
      scope: '*tests*'

  test:e2e:cloud_firestore:
    run: |
      cd packages/cloud_firestore/cloud_firestore/example
      flutter test integration_test/cloud_firestore_e2e_test.dart
    description: |
      Run all e2e tests for cloud_firestore.

  test:e2e:firebase_performance:
    run: |
      cd packages/firebase_performance/firebase_performance/example
      flutter test integration_test/firebase_performance_e2e_test.dart
    description: |
      Run all e2e tests for firebase_performance.

  test:e2e:web:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter drive --target=./integration_test/e2e_test.dart --driver=./test_driver/integration_test.dart -d chrome"
    description: |
      Run all e2e tests on web platform. Please ensure you have "chromedriver" installed and running.
    packageFilters:
      dirExists:
        - test_driver
      scope: '*tests*'

  test:e2e:web:cloud_firestore:
    run: |
      cd packages/cloud_firestore/cloud_firestore/example
      flutter drive --target=./integration_test/cloud_firestore_e2e_test.dart --driver=./test_driver/integration_test.dart --release -d chrome
    description: |
      Run all e2e tests for cloud_firestore on web platform. Please ensure you have "chromedriver" installed and running.

  test:e2e:web:firebase_performance:
    run: |
      cd packages/firebase_performance/firebase_performance/example
      flutter drive --target=./integration_test/firebase_performance_e2e_test.dart --driver=./test_driver/integration_test.dart --release -d chrome
    description: |
      Run all e2e tests for firebase_performance on web platform. Please ensure you have "chromedriver" installed and running.

  clean:deep:
    run: git clean -x -d -f -q
    description: Clean things very deeply, can be used to establish "pristine checkout" status.

  qualitycheck:
    run: |
      melos run clean:deep && \
      melos clean && \
      melos bootstrap && \
      melos run lint:all && \
      melos run build:all && \
      melos run test:all
    description: Run all targets generally expected in CI for a full local quality check.

  generate:pigeon:
    run: |
      melos exec -- "flutter pub run pigeon --input ./pigeons/messages.dart" && \
      melos run generate:pigeon:macos --no-select && \
      melos run format --no-select
    packageFilters:
      file-exists: 'pigeons/messages.dart'
    description: Generate the pigeon messages for all the supported packages.

  generate:pigeon:macos:
    run: |
      melos exec -- "sed -i '' 's;#import <Flutter/Flutter.h>;#if TARGET_OS_OSX\n#import <FlutterMacOS/FlutterMacOS.h>\n#else\n#import <Flutter/Flutter.h>\n#endif;g' ios/Classes/messages.g.m"
    packageFilters:
      file-exists: 'ios/Classes/messages.g.m'
    description: Pigeon does not add the condition to import Flutter or FlutterMacOs. Add the condition

  odm:test:
    run: |
      melos run odm:test:dart &&
      melos run odm:test:flutter
    description: Run all tests for the ODM.

  odm:test:dart:
    run: |
      melos exec -- \
        "dart test"
    description: Run Dart tests for the ODM.
    packageFilters:
      dirExists: 'test'
      dependsOn: 'test'
      scope: '*odm*'

  odm:test:flutter:
    run: |
      melos exec -- \
        "flutter test"
    description: Run Flutter tests for the ODM.
    packageFilters:
      dirExists: 'test'
      noDependsOn: 'test'
      scope: '*odm*'

  odm:example_build_runner:build:
    run: |
      melos exec -- \
        "flutter pub run build_runner build --delete-conflicting-outputs"
    description: Run a build_runner build in the ODM example app.
    packageFilters:
      scope: '*odm_example*'

  odm:generator_test_build_runner:build:
    run: |
      melos exec -c 1 -- \
        "dart pub get && flutter pub run build_runner build --delete-conflicting-outputs"
    description: Run a build_runner build generator test.
    packageFilters:
      scope:
        - '*odm_generator_integration*'

  odm:example_build_runner:watch:
    run: |
      melos exec -c 5 -- \
        "flutter pub run build_runner watch --delete-conflicting-outputs"
    description: Run build_runner watch in the ODM example app.
    packageFilters:
      scope: '*odm_example*'

  # Additional cleanup lifecycle script, executed when `melos clean` is run.
  postclean: >
    melos exec -c 6 -- "flutter clean"

  add-license-header:
    # If you add here another --ignore flag, add it also to
    # "check-license-header".
    run: |
      addlicense -f header_template.txt \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        --ignore "**/flutter/generated_plugin_registrant.h" \
        --ignore "**/flutter/generated_plugin_registrant.cc" \
        .
    description: Add a license header to all necessary files.

  check-license-header:
    # If you add here another --ignore flag, add it also to
    # "add-license-header".
    run: |
      addlicense -f header_template.txt \
        --check \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        --ignore "**/flutter/generated_plugin_registrant.h" \
        --ignore "**/flutter/generated_plugin_registrant.cc" \
        .
    description: Add a license header to all necessary files.
