// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Mocks generated by Mockito 5.4.0 from annotations
// in firebase_performance_web/test/firebase_performance_web_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:firebase_core_web/firebase_core_web_interop.dart' as _i2;
import 'package:firebase_performance_web/src/interop/performance.dart' as _i4;
import 'package:firebase_performance_web/src/interop/performance_interop.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApp_0 extends _i1.SmartFake implements _i2.App {
  _FakeApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePerformanceJsImpl_1 extends _i1.SmartFake
    implements _i3.PerformanceJsImpl {
  _FakePerformanceJsImpl_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrace_2 extends _i1.SmartFake implements _i4.Trace {
  _FakeTrace_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTraceJsImpl_3 extends _i1.SmartFake implements _i3.TraceJsImpl {
  _FakeTraceJsImpl_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Performance].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformance extends _i1.Mock implements _i4.Performance {
  @override
  _i2.App get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeApp_0(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.App);
  @override
  bool get instrumentationEnabled => (super.noSuchMethod(
        Invocation.getter(#instrumentationEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get dataCollectionEnabled => (super.noSuchMethod(
        Invocation.getter(#dataCollectionEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.PerformanceJsImpl get jsObject => (super.noSuchMethod(
        Invocation.getter(#jsObject),
        returnValue: _FakePerformanceJsImpl_1(
          this,
          Invocation.getter(#jsObject),
        ),
        returnValueForMissingStub: _FakePerformanceJsImpl_1(
          this,
          Invocation.getter(#jsObject),
        ),
      ) as _i3.PerformanceJsImpl);
  @override
  _i4.Trace trace(String? traceName) => (super.noSuchMethod(
        Invocation.method(
          #trace,
          [traceName],
        ),
        returnValue: _FakeTrace_2(
          this,
          Invocation.method(
            #trace,
            [traceName],
          ),
        ),
        returnValueForMissingStub: _FakeTrace_2(
          this,
          Invocation.method(
            #trace,
            [traceName],
          ),
        ),
      ) as _i4.Trace);
}

/// A class which mocks [Trace].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrace extends _i1.Mock implements _i4.Trace {
  @override
  _i3.TraceJsImpl get jsObject => (super.noSuchMethod(
        Invocation.getter(#jsObject),
        returnValue: _FakeTraceJsImpl_3(
          this,
          Invocation.getter(#jsObject),
        ),
        returnValueForMissingStub: _FakeTraceJsImpl_3(
          this,
          Invocation.getter(#jsObject),
        ),
      ) as _i3.TraceJsImpl);
  @override
  String getAttribute(String? attr) => (super.noSuchMethod(
        Invocation.method(
          #getAttribute,
          [attr],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Map<String, String> getAttributes() => (super.noSuchMethod(
        Invocation.method(
          #getAttributes,
          [],
        ),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  int getMetric(String? metricName) => (super.noSuchMethod(
        Invocation.method(
          #getMetric,
          [metricName],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void incrementMetric(
    String? metricName, [
    int? num,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #incrementMetric,
          [
            metricName,
            num,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void putMetric(
    String? metricName,
    int? num,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #putMetric,
          [
            metricName,
            num,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void putAttribute(
    String? attr,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #putAttribute,
          [
            attr,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAttribute(String? attr) => super.noSuchMethod(
        Invocation.method(
          #removeAttribute,
          [attr],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
